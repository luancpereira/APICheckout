definitions:
  request.InsertTransaction:
    properties:
      description:
        type: string
      transaction_date:
        type: string
      transaction_value:
        type: number
    type: object
  request.PostAuthLogin:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  request.PostUser:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      repeat_password:
        type: string
    type: object
  request.PutTransaction:
    properties:
      description:
        type: string
      id:
        type: integer
      transaction_date:
        type: string
      transaction_value:
        type: number
    type: object
  response.Created:
    properties:
      id:
        type: integer
    type: object
  response.Exception:
    properties:
      key:
        type: string
      message:
        type: string
    type: object
  response.GetTransactions:
    properties:
      description:
        type: string
      exchange_rate:
        type: number
      id:
        type: integer
      transaction_date:
        type: string
      transaction_value:
        type: number
      transaction_value_converted_to_wish_currency:
        type: number
    type: object
  response.GetTransactionsByID:
    properties:
      description:
        type: string
      exchange_rate:
        type: number
      id:
        type: integer
      transaction_date:
        type: string
      transaction_value:
        type: number
      transaction_value_converted_to_wish_currency:
        type: number
    type: object
  response.List:
    properties:
      data: {}
      pagination:
        $ref: '#/definitions/response.Pagination'
    type: object
  response.Pagination:
    properties:
      total:
        type: integer
    type: object
  response.PostAuthLogin:
    properties:
      token:
        type: string
    type: object
  response.PostUser:
    properties:
      token:
        type: string
    type: object
  response.PostUserException:
    properties:
      field:
        enum:
        - COUNTRY
        - EMAIL
        - PASSWORD
        - FORM
        type: string
      key:
        type: string
      message:
        type: string
    type: object
info:
  contact: {}
  description: API checkout
  title: API Checkout
  version: "1.0"
paths:
  /api/auth/login:
    post:
      parameters:
      - description: Body JSON
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.PostAuthLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.PostAuthLogin'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Exception'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Exception'
      tags:
      - Auth
  /api/checkout:
    post:
      parameters:
      - description: Body JSON
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.InsertTransaction'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.Created'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Exception'
      security:
      - JWT: []
      tags:
      - Checkout Orders
  /api/checkout/transactions:
    put:
      parameters:
      - description: Body JSON
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.PutTransaction'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Exception'
      security:
      - JWT: []
      tags:
      - Checkout Orders
  /api/checkout/transactions/{transactionID}:
    delete:
      parameters:
      - description: transactionID
        in: path
        name: transactionID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Exception'
      security:
      - JWT: []
      tags:
      - Checkout Orders
  /api/checkout/transactions/{transactionID}/country/{country}:
    get:
      parameters:
      - description: transactionID
        in: path
        name: transactionID
        required: true
        type: integer
      - description: country
        in: path
        name: country
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetTransactionsByID'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Exception'
      security:
      - JWT: []
      tags:
      - Checkout Orders
  /api/checkout/transactions/country/{country}:
    get:
      parameters:
      - description: country
        in: path
        name: country
        required: true
        type: string
      - default: 10
        description: limit min 1
        in: query
        name: limit
        type: integer
      - default: 0
        description: offset min 0
        in: query
        name: offset
        type: integer
      - description: filter_transaction_date
        in: query
        name: filter_transaction_date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.List'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.GetTransactions'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Exception'
      security:
      - JWT: []
      tags:
      - Checkout Orders
  /api/users:
    post:
      parameters:
      - description: Body JSON
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.PostUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.PostUser'
        "400":
          description: Bad Request
          schema:
            items:
              $ref: '#/definitions/response.PostUserException'
            type: array
      tags:
      - User
securityDefinitions:
  JWT:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
