// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: user.sql

package sqlc

import (
	"context"
	"time"
)

const insertUser = `-- name: InsertUser :one

INSERT INTO "user" (
    email,
    name,
    password,
    permission,
    created_at,
    token_confirmation,
    token_confirmation_expiration_date
) VALUES (
    $1::VARCHAR,
    $2::VARCHAR,
    $3::VARCHAR,
    $4::VARCHAR,
    $5::TIMESTAMP,
    $6::VARCHAR,
    $7::TIMESTAMP
)
RETURNING id, email
`

type InsertUserParams struct {
	Email                           string
	Name                            string
	Password                        string
	Permission                      string
	CreatedAt                       time.Time
	TokenConfirmation               string
	TokenConfirmationExpirationDate time.Time
}

type InsertUserRow struct {
	ID    int64
	Email string
}

// ---------------
// -- INSERTS ----
// ---------------
func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (InsertUserRow, error) {
	row := q.queryRow(ctx, q.insertUserStmt, insertUser,
		arg.Email,
		arg.Name,
		arg.Password,
		arg.Permission,
		arg.CreatedAt,
		arg.TokenConfirmation,
		arg.TokenConfirmationExpirationDate,
	)
	var i InsertUserRow
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const selectUserForLogin = `-- name: SelectUserForLogin :one



SELECT
    id,
    email,
    "password"::VARCHAR
FROM
    "user"
WHERE
    LOWER(email) = LOWER($1::VARCHAR)
`

type SelectUserForLoginRow struct {
	ID       int64
	Email    string
	Password string
}

// ---------------
// -- INSERTS ----
// ---------------
// ---------------
// -- SELECTS ----
// ---------------
func (q *Queries) SelectUserForLogin(ctx context.Context, email string) (SelectUserForLoginRow, error) {
	row := q.queryRow(ctx, q.selectUserForLoginStmt, selectUserForLogin, email)
	var i SelectUserForLoginRow
	err := row.Scan(&i.ID, &i.Email, &i.Password)
	return i, err
}

const selectUserIDByEmail = `-- name: SelectUserIDByEmail :one
SELECT
    id::BIGINT
FROM
    "user"
WHERE
    email = $1::VARCHAR
`

func (q *Queries) SelectUserIDByEmail(ctx context.Context, email string) (int64, error) {
	row := q.queryRow(ctx, q.selectUserIDByEmailStmt, selectUserIDByEmail, email)
	var id int64
	err := row.Scan(&id)
	return id, err
}
